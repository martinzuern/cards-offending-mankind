name: CI CD

on: [push]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    container: node:16
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        working-directory: ./frontend
      - name: Run linter
        run: yarn lint
        working-directory: ./frontend
      - name: Run typecheck
        run: yarn lint:type
        working-directory: ./frontend
      - name: Build frontend successfully
        run: yarn build
        working-directory: ./frontend

  test-backend:
    runs-on: ubuntu-latest
    container: node:16
    timeout-minutes: 5
    services:
      redis:
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Codecov
        run: yarn global add codecov
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        working-directory: ./backend
      - name: Run linter
        run: yarn lint
        working-directory: ./backend
      - name: Run tests
        run: yarn test
        working-directory: ./backend
        env:
          REDIS_URL: redis://redis:6379
      - name: Submit to Codecov
        run: codecov -F backend
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  deploy-heroku:
    runs-on: ubuntu-latest
    if: "'refs/heads/master' == github.ref"
    needs: [test-frontend, test-backend]
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build, Push and Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.8.8
        with:
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          usedocker: true
          docker_build_args: |
            COMMIT_SHA
            FRONTEND_SENTRY_DSN
        env:
          COMMIT_SHA: ${{ github.sha }}
          FRONTEND_SENTRY_DSN: ${{ secrets.FRONTEND_SENTRY_DSN }}
